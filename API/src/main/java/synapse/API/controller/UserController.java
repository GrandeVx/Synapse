package synapse.API.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import synapse.API.model.Message;
import synapse.API.model.User;
import synapse.API.repository.SensorRepository;
import synapse.API.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.lang.reflect.Array;
import java.util.Random;
import java.util.Stack;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {


	private String IdGenerator() {
		int leftLimit = 97; // letter 'a'
		int rightLimit = 122; // letter 'z'
		int targetStringLength = 6;
		Random random = new Random();

		String generatedString = random.ints(leftLimit, rightLimit + 1)
				.limit(targetStringLength)
				.collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
				.toString();

		return generatedString;

	}



	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle
	// the data
	private UserRepository userRepository;
	@Autowired
	private SensorRepository sensorRepository;

	@PostMapping(path="/register")
	public @ResponseBody ResponseEntity<Message> RegisterUser(
		@RequestParam String username,
		@RequestParam String mail,
		@RequestParam String password
	) {

		Iterable<User> AllUsers =  userRepository.findAll(); // Otteniamo tutti gli utenti dal DB

		// Controlliamo che non esistano altri utenti con mail o username identici
		for (User utente : AllUsers) {
			if (utente.getUsername().equals(username)) {
				return new ResponseEntity<Message>(new Message(400, "Username già utilizzato"), HttpStatus.OK);
			}
			if (utente.getEmail().equals(mail)) {
				return new ResponseEntity<Message>(new Message(400, "Mail già utilizzata"), HttpStatus.OK);
			}
		}

		Stack<String> s = new Stack<String>();
		String id;

		for (User u : AllUsers) {
			s.push(u.getId());
		}

		do {
			id = IdGenerator();
		} while	(s.contains(id));

		User newUser = new User();
		newUser.setId(id);
		newUser.setUsername(username);
		newUser.setEmail(mail);
		newUser.setPassword(password);

		userRepository.save(newUser);

		return new ResponseEntity<Message>(new Message(200,"Registrazione Avvenuta"), HttpStatus.OK);

	}

	@PostMapping(path="/login")
	public @ResponseBody ResponseEntity<Message>  LoginUser(
			@RequestParam String mail,
			@RequestParam String password
	) {

		Iterable<User> AllUsers =  userRepository.findAll(); // Otteniamo tutti gli utenti dal DB
		for (User u : AllUsers) {
			if (u.getEmail().equals(mail) && u.getPassword().equals(password)) {
				return new ResponseEntity<Message>(new Message(200, "Login Avvenuto"), HttpStatus.OK);
			}
		}

		return new ResponseEntity<Message>(new Message(400, "Password o email Errati"), HttpStatus.OK);
	}


	@PostMapping(path="/updatepassword")
	public @ResponseBody ResponseEntity<Message> UpdatePassword(
			@RequestParam String mail,
			@RequestParam String old_password,
			@RequestParam String password
	) {

		if (old_password.equals(password)) {
			return new ResponseEntity<Message>(new Message(400, "la nuova e la vecchia password coincidono"), HttpStatus.OK);
		}

		Iterable<User> AllUsers =  userRepository.findAll(); // Otteniamo tutti gli utenti dal DB
		for (User u : AllUsers) {
			if (u.getEmail().equals(mail) && u.getPassword().equals(old_password)) {
				u.setPassword(password);
				userRepository.save(u);
				return new ResponseEntity<Message>(new Message(200, "Password Aggiornata"), HttpStatus.OK);
				//return "Password aggiornata con successo";
			}
		}

		return new ResponseEntity<Message>(new Message(400, "Password Errata"), HttpStatus.BAD_REQUEST);

	}








}
