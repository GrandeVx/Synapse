package synapse.API.controller;

import synapse.API.model.SensorInfo;
import synapse.API.repository.RealtimeService;
import synapse.API.model.Sensor;
import synapse.API.model.Sensor_Data;
import synapse.API.repository.SensorRepository;
import synapse.API.repository.UserRepository;
import synapse.API.repository.SensorDataRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;

import java.util.ArrayList;
import java.util.List;


@Controller	// This means that this class is a Controller
@RequestMapping(path="/sensor") // This means URL's start with /demo (after Application path)
public class SensorController {

    @Autowired// This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private SensorRepository sensorRepository;

    @Autowired
    private SensorDataRepository sensordataRepository;

    public RealtimeService realtimeService;

    public SensorController(RealtimeService realtimeService) {
        this.realtimeService = realtimeService;
    }


    // Ottieni i Dati di un Sensore Dato il suo Seriale
    @PostMapping(path = "/get")
    public @ResponseBody ResponseEntity<Sensor> getSensor(@RequestParam String Serial_number) {

        Iterable<Sensor> AllSensors = sensorRepository.findAll(); // Otteniamo tutti gli utenti dal DB

        for (Sensor sensor : AllSensors) {
            if (sensor.getSerialNumber().equals(Serial_number)) {
                return new ResponseEntity<Sensor>(sensor, HttpStatus.OK);
                // return new Respond(200, "Sensore Trovato Con Successo",sensor);
            }
        }

        return new ResponseEntity<Sensor>(HttpStatus.NOT_FOUND);
        // return new Respond(404, "Sensore Non Trovato", null);

    }

    // Ottieni tutti i Dati dei sensori (compreso le misurazioni) di un utente
    @PostMapping(path = "/getAll")
    public @ResponseBody ResponseEntity<List<SensorInfo>> getAllSensors(@RequestParam String user_id) {

        Iterable<Sensor> AllSensors = sensorRepository.findAll(); // Otteniamo tutti i sensori dal DB
        Iterable<Sensor_Data> AllSensorData = sensordataRepository.findAll(); // Otteniamo tutti i dati dei sensori dal DB

        List<SensorInfo> PackageToSend = new ArrayList<SensorInfo>();

        for (Sensor sensor : AllSensors) {
            if (sensor.getUser_id().equals(user_id)) {

                List<Sensor_Data> Measurements = new ArrayList<Sensor_Data>();

                for (Sensor_Data measure : AllSensorData) {
                    if (measure.getSerialNumber().equals(sensor.getSerialNumber())) {
                        Measurements.add(measure);
                    }
                }

                SensorInfo pack = new SensorInfo(sensor, Measurements);
                PackageToSend.add(pack);

            }
        }

        return new ResponseEntity<List<SensorInfo>>(PackageToSend, HttpStatus.OK);


    }

    // Ottieni tutte le misurazioni di un Sensore (Dato il Seriale)
    @PostMapping(path = "/getMeasure")
    public @ResponseBody ResponseEntity<List<Sensor_Data>> getMeasure(@RequestParam String Serial_number) {
        List<Sensor_Data> Measurements = new ArrayList<Sensor_Data>();

        Iterable<Sensor> AllSensors = sensorRepository.findAll(); // Otteniamo tutti gli utenti dal DB
        Iterable<Sensor_Data> AllSensorData = sensordataRepository.findAll(); // Otteniamo tutti i dati dei sensori dal DB

        for (Sensor_Data measure : AllSensorData) {
            if (measure.getSerialNumber().equals(Serial_number)) {
                Measurements.add(measure);
            }
        }

        if (Measurements.size() == 0) {
            return new ResponseEntity<List<Sensor_Data>>(HttpStatus.NOT_FOUND);
        } else {
            return new ResponseEntity<List<Sensor_Data>>(Measurements, HttpStatus.OK);
        }

    }



    @PostMapping(path = "/addMeasure")
    public @ResponseBody ResponseEntity<Sensor_Data> addMeasure(@RequestParam String Serial_number, @RequestParam float measure) {

        Iterable<Sensor> AllSensors = sensorRepository.findAll(); // Otteniamo tutti i sensori dal DB

        Sensor_Data newMeasure = null;

        for (Sensor sensor : AllSensors) {
            if (sensor.getSerialNumber().equals(Serial_number)) {
                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                LocalDateTime now = LocalDateTime.now();

                newMeasure = new Sensor_Data();
                newMeasure.setSerialNumber(Serial_number);
                newMeasure.setMeasure(measure);
                newMeasure.setDate(dtf.format(now));

                sensordataRepository.save(newMeasure);
                RealtimeService.updateSensor(sensor, newMeasure);
                return new ResponseEntity<Sensor_Data>(newMeasure, HttpStatus.OK);
            }
        }

        return new ResponseEntity<Sensor_Data>(HttpStatus.NOT_FOUND);
    }


}



